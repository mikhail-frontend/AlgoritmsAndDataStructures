// Space Complexity (пространственная сложность) отличается от Big O, поскольку она измеряет,
// сколько памяти (пространства) требуется для выполнения программы или алгоритма, в то время как Big O измеряет,
// как меняется время выполнения программы или алгоритма в зависимости от размера входных данных.

// Space Complexity обычно измеряется в количестве используемой памяти (байтах или битах) или в терминах дополнительных структур данных,
// которые необходимо создать.
//
// Давайте рассмотрим примеры на языке JavaScript:

//TODO Пример с поиском максимального элемента в массиве:
function findMaxElement(arr) {
    let max = arr[0];
    for (let i = 1; i < arr.length; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}
// Space Complexity (пространственная сложность) в этом примере составляет O(1),
// поскольку мы используем только константное количество дополнительной памяти для хранения переменной max.
// Количество памяти не зависит от размера массива.


//TODO Пример с созданием нового массива:
function duplicateArray(arr) {
    let duplicate = [];
    for (let i = 0; i < arr.length; i++) {
        duplicate.push(arr[i]);
    }
    return duplicate;
}

// Space Complexity в этом случае равна O(n), где n - длина исходного массива arr.
// Мы создаем новый массив duplicate и копируем каждый элемент из arr в duplicate.
// Размер нового массива будет таким же, как размер исходного.
//
// Таким образом, Space Complexity и Big O имеют разные фокусы измерений.
// Space Complexity измеряет потребление памяти, а Big O измеряет изменение времени выполнения в зависимости от размера входных данных.




// На Space Complexity влияют различные факторы, включая:

// Дополнительные переменные: Количество переменных, которые вы создаете в вашей программе или алгоритме,
// может влиять на пространственную сложность. Если вы создаете новые переменные, каждая из которых занимает определенный объем памяти,
// то пространственная сложность увеличится.

// Структуры данных: Использование дополнительных структур данных, таких как массивы, списки, хэш-таблицы и деревья,
// может потребовать дополнительного пространства.
// Например, если вы создаете новый массив для хранения копии другого массива, это увеличит пространственную сложность.

// Рекурсия: Если ваш алгоритм использует рекурсию,
// каждый вызов рекурсивной функции требует нового набора переменных и контекста выполнения,
// что может привести к увеличению использования памяти. Глубина рекурсии также может сильно влиять на Space Complexity.

// Входные данные: Иногда Space Complexity может зависеть от характеристик входных данных.
// Например, если ваш алгоритм выполняет какую-то операцию для каждого элемента входного массива,
// пространственная сложность будет зависеть от размера этого массива.

// Важно понимать, что пространственная сложность оценивает объем памяти,
// необходимый для выполнения программы или алгоритма, и может быть одним из факторов,
// которые влияют на выбор оптимального решения.